<?xml version="1.0" encoding="UTF-8"?>
<project name="kitty-glitter" default="build">
    <target name="build" depends="prepare,lint,phploc, vendors, phpcpd, phpunit, phpcs, phpcs-ci, phpmd "/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit"/>

    <target name="vendors" depends="clean" description="Add Vendors">
        <exec executable="php" failonerror="true">
            <arg value='/usr/local/bin/composer' />
            <arg value='install' />
        </exec>
    </target>

    <!--<target name="makeD" depends="clean" description="Run sync">-->
        <!--<mkdir dir="${basedir}/prototype_pcg/Test/fixtures"/>-->
    <!--</target>-->
    <!--<target name="sync" depends="clean" description="Run sync">-->
        <!--<exec executable="php" failonerror="true">-->
            <!--<arg value='${basedir}/prototype_pcg/sync_database.php' />-->
        <!--</exec>-->
    <!--</target>-->

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}/Calc/src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/Calc/Test">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv"/>
            <arg value="${basedir}/build/logs/phploc.csv"/>
            <arg path="${basedir}/prototype_pcg/admin"/>
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/prototype_pcg/admin"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/Calc/src/Calculators.php"/>
            <arg value="xml"/>
            <arg value="cleancode,codesize,controversial,design,naming,unusedcode"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/Calc/src"/>
            <arg value="xml"/>
            <arg value="${basedir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="${basedir}/build/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=${basedir}/phpcs.xml"/>
            <arg path="${basedir}/Calc/src"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=${basedir}/phpcs.xml"/>
            <arg path="${basedir}/Calc/src"/>
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd"/>
            <arg value="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/Calc/src"/>
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox"/>
    </target>

    <!--<target name="phpunit" description="Run unit prototype_pcg/admins with PHPUnit">-->
        <!--<exec executable="phpunit" failonerror="true">-->
            <!--<arg path="${basedir}/phpunit.xml.dist"/>-->
        <!--</exec>-->
    <!--</target>-->

    <target name="phpunit">
        <exec executable="phpunit" failonerror="true" description="Run unit app with PHPUnit 4.1.0">
            <arg line="--verbose --stderr " />
            <arg value="-c" />
            <arg path="phpunit.xml" />
            <arg line="--coverage-html " />
            <arg path="${basedir}/build/"/>
        </exec>
    </target>
</project>